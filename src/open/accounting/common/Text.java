package open.accounting.common;

import java.security.MessageDigest;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.lang.StringUtils;

/**
 * 텍스트 처리에 대한 여러 유용한 메소드들을 모여있다. 모두 static 메소드이므로
 * 인스턴스를 생성할 필요없이 사용할 수 있다. (2001년 8월 1일 최초 작성, 2006년 4월 25일 수정)
 *
 * @author		김진(Kim Jin) [purple@playforum.net]
 */
public class Text {

    private Text() {}
    
    public static String nullValue(Object object) {
    	if(null == object) {
    		return "";
    	}
    	return object.toString();
    }
    
   /**
     * 8859_1 인코딩으로 잘못 읽은 문자열을 지정된 인코딩으로 다시 읽어들인다.
     */
    public static String fromIso8859(String str, String encoding) {
        if (null == str) {
            return null;
        }

        try {
            str = new String(str.getBytes("8859_1"), encoding);
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }

        return str;
    }

    /**
     * 텍스트의 한줄 앞에 지정한 문자열을 삽입한다. 유닉스, 도스 스타일의 텍스트
     * 포맷에 상관없이 작동한다.
     *
     * @param	source	변환할 문자열
     * @param	str		끼워 넣어질 문자열
     * @return			변환된 문자열
     */
    public static String insertAtLineStart(String source, String str) {
        if (null == source) {
            return null;
        }
        if (null == str) {
            return source;
        }

        int pos = 0, oldPos = 0;
        StringBuffer sb = new StringBuffer();
        while ((pos = source.indexOf('\n', oldPos)) >= 0) {
            sb.append(str);
            sb.append(source.substring(oldPos, pos + 1));
            oldPos = pos + 1;
        }
        if (oldPos < source.length()) {
            sb.append(str);
            sb.append(source.substring(oldPos));
        }

        return sb.toString();
    }

    /**
     * 텍스트를 html로 출력할 수 있도록 변환한다. 줄넘김에 &lt;br /&gt; 태그를 붙이고
     * 줄 시작 부분의 공백은 적절히 공백 엔터티(&amp;nbsp;)를 붙여 준다.
     * 그외의 html 태그는 모두 escape 시킨다.
     */
    public static String textToHtml(String src) {
        if (null == src) {
            return "";
        }
        StringBuffer sbf = new StringBuffer();
        boolean isStart = true;
        boolean isContinue = false;
        char c = 0;
        int sz = src.length();
        for (int i = 0 ; i < sz ; i++) {
            c = src.charAt(i);
            if ('\r' == c) {
                sbf.append("<br />");
                sbf.append(c);
                isContinue = true;
                continue;
            } else if ('\n' == c) {
                if (! isContinue) {
                    sbf.append("<br />");
                }
                sbf.append(c);
                isContinue = false;
                isStart = true;
                continue;
            }
            if (isStart) {
                if (' ' == c) {
                    sbf.append("&nbsp;");
                    continue;
                } else if ('\t' == c) {
                    sbf.append("&nbsp;&nbsp;&nbsp;&nbsp;");
                    continue;
                } else {
                    isStart = false;
                }
            }
            if ('<' == c) {
                sbf.append("&lt;");
            } else if ('>' == c) {
                sbf.append("&gt;");
            } else if ('&' == c) {
                sbf.append("&amp;");
            } else {
                sbf.append(c);
            }
        }
        return sbf.toString();
    }

    /**
     * 데이타베이스에 문자열을 저장할 때 문제를 일으키는 특수 문자들을 escape 시킨다.
     * 따옴표, 작은 따옴표, 이스케이프 문자들을 바꾼다.
     *
     * @param	src		변환할 문자열
     * @return			escape된 문자열
     */
    public static String addSlashes(String src) {
        if (null == src) {
            return null;
        }

        int length = src.length();
        StringBuffer sbf = new StringBuffer(length + 20);
        int i = 0, idx = 0;
        char c;
        while (i < length) {
            c = src.charAt(i);
            switch (c) {
                case '\'' :
                    sbf.append(src.substring(idx, i));
                    idx = ++i;
                    sbf.append("\\\'");
                    break;
                case '\"' :
                    sbf.append(src.substring(idx, i));
                    idx = ++i;
                    sbf.append("\\\"");
                    break;
                case '\\' :
                    sbf.append(src.substring(idx, i));
                    idx = ++i;
                    sbf.append("\\\\");
                    break;
                default :
                    i++;
            }
        }
        if (idx < length) {
            sbf.append(src.substring(idx));
        }
        return sbf.toString();
    }

    /**
     * addSlashes로 escape 시킨 문자열을 원래 문자열로 복원시킨다.
     *
     * @param	src		변환할 문자열
     * @return			복원된 문자열
     */
    public static String stripSlashes(String src) {
        if (null == src) {
            return null;
        }

        int length = src.length();
        StringBuffer sbf = new StringBuffer(length);
        int i = 0, idx = 0;
        char c;
        while (i < length) {
            c = src.charAt(i);
            if ('\\' == c && length != ++i) {
                c = src.charAt(i);
                if ('\'' == c || '\"' == c || '\\' == c) {
                    sbf.append(src.substring(idx, i - 1));
                    idx = ++i;
                }
            } else {
                i++;
            }
        }
        if (idx < length) {
            sbf.append(src.substring(idx));
        }
        return sbf.toString();
    }

    /**
     * html 태그로 해석되지 않게 문자열을 바꿔준다.
     *
     * @param	str		바꿀 문자열
     * @return			변환된 문자열
     */
    public static String htmlEscape(String src) {
        if (null == src) {
            return null;
        }

        int length = src.length();
        StringBuffer sbf = new StringBuffer(length + 50);
        int i = 0, idx = 0;
        char c;
        while (i < length) {
            c = src.charAt(i);
            switch (c) {
                case '\'' :
                    sbf.append(src.substring(idx, i));
                    idx = ++i;
                    sbf.append("&#039;");
                    break;
                case '\"' :
                    sbf.append(src.substring(idx, i));
                    idx = ++i;
                    sbf.append("&quot;");
                    break;
                case '<' :
                    sbf.append(src.substring(idx, i));
                    idx = ++i;
                    sbf.append("&lt;");
                    break;
                case '>' :
                    sbf.append(src.substring(idx, i));
                    idx = ++i;
                    sbf.append("&gt;");
                    break;
                case '&' : // IE에서 통합형 한글을 위한 &#xxxxx;은 바꾸지 않는다.
                    if (length > (i + 5)
                        && ('#' == src.charAt(i + 1))
                        && (';' == src.charAt(i + 5))
                        && ('0' <= src.charAt(i + 4))
                        && ('9' >= src.charAt(i + 4))) {
                        i += 6;
                    } else if (length > (i + 7)
                        && ('#' == src.charAt(i + 1))
                        && (';' == src.charAt(i + 7))
                        && ('0' <= src.charAt(i + 6))
                        && ('9' >= src.charAt(i + 6))) {
                        i += 8;
                    } else {
                        sbf.append(src.substring(idx, i));
                        idx = ++i;
                        sbf.append("&amp;");
                    }
                    break;
                default :
                    i++;
            }
        }
        if (idx < length) {
            sbf.append(src.substring(idx));
        }
        return sbf.toString();
    }

    /**
     * XML에서 property value에 쓰일 수 있도록
     * 몇가지 문자들을 바꿔 주는 메소드. ', <, & 문자를 바꿔 준다.
     *
     * @param	str		바꿀 문자열
     * @return			변환된 문자열
     */
    public static String escapeXml(String src) {
        if (null == src) {
            return null;
        }

        int length = src.length();
        StringBuffer sbf = new StringBuffer(length + 50);
        int i = 0, idx = 0;
        char c;
        while (i < length) {
            c = src.charAt(i);
            switch (c) {
                case '\'' :
                    sbf.append(src.substring(idx, i));
                    idx = ++i;
                    sbf.append("&#039;");
                    break;
                case '<' :
                    sbf.append(src.substring(idx, i));
                    idx = ++i;
                    sbf.append("&lt;");
                    break;
                case '&' :
                    sbf.append(src.substring(idx, i));
                    idx = ++i;
                    sbf.append("&amp;");
                    break;
                default :
                    i++;
            }
        }
        if (idx < length) {
            sbf.append(src.substring(idx));
        }
        return sbf.toString();
    }

    /**
     * UTF-8 인코딩으로 URL Encode를 한다.
     * URLEncoder.encode() 메서드와 달리 Exception 처리를 하지 않아도 된다.
     */
    public static String urlEncode(String src) {
        if (null == src) {
            return null;
        }
        String result = null;
        try {
            result = java.net.URLEncoder.encode(src, "UTF-8");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return result;
    }

    /**
     * 문자열을 unicode urlencode한다.
     * 알파벳 문자와 숫자는 변하지 않고, 그외 8비트 문자는 %xx 형태로 인코딩한다.
     * Unicode 코드값이 256을 넘는 문자는 %uxxxx 형태로 인코딩된다.
     * IE v4 이상의 escape 메소드와 호환된다.
     */
    public static String unicodeUrlEncode(String src) {
        if (null == src) {
            return null;
        }

        int length = src.length();
        char c;
        StringBuffer sbf = new StringBuffer();

        int i = 0;
        while (i < length) {
            c = src.charAt(i++);
            if (('0' <= c && c <= '9') || ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')) {
                sbf.append(c);
            } else if (c <= 255) {
                sbf.append("%");
                sbf.append(Integer.toHexString((int) c));
            } else {
                sbf.append("%u");
                sbf.append(Integer.toHexString((int) c));
            }
        }
        return sbf.toString();
    }

    /**
     * 문자열의 md5 해시값을 구하여 그것의 문자열 표현을 구한다.
     */
    public static String md5(String src) {
        if (null == src || 0 == src.length()) {
            return src;
        }
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance("md5");
        } catch (Exception e) {
            throw new RuntimeException("assert fail - md5 digest");
        }
        byte[] hash = digest.digest(src.getBytes());
        int value = 0;
        StringBuffer sbf = new StringBuffer(32);
        for (int i = 0 ; i < hash.length ; i++) {
            value = (0x000000FF & hash[i]);
            if (value < 0x10) {
                sbf.append("0");
            }
            sbf.append(Integer.toHexString(value));
        }
        return sbf.toString();
    }


    /**
     * 정해진 숫자만큼 글 첫 부분을 뽑아낸다. html 태그는 모두 제외한다.
     */
    public static String getHead(String src, int count, String abbr) {
        if (null == src || 0 == src.length()) {
            return "";
        }
        if (0 == count) {
            return "";
        }
        int len = src.length();

        StringBuffer sbf = new StringBuffer();
        int i = 0;
        char c = 0;
        int cnt = 0;
        boolean inTag = false;
        while (i < len) {
            if (cnt >= count) {
                break;
            }
            c = src.charAt(i);
            i++;
            if (inTag) {
                if ('>' == c) {
                    inTag = false;
                }
                continue;
            }
            if ('<' == c) {
                c = src.charAt(i);
                i++;
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c == '/')) {
                    inTag = true;
                    continue;
                } else {
                    sbf.append('<').append(c);
                    cnt += 2;
                }
            } else {
                sbf.append(c);
                cnt++;
            }
        }

        return sbf.append(null == abbr ? "" : abbr).toString();
    }

    /**
     * 정해진 숫자만큼 글을 뽑아내되, search 스트링 앞 뒤로 적당한 양을 뽑아낸다.
     */
    public static String getAbstract(String src, String query, int count, String abbr) {
        if (null == src || 0 == src.length()) {
            return "";
        }
        if (0 == count) {
            return "";
        }
        int idx = src.indexOf(query);
        int start = 0;
        if (idx >= 0) {
            start = idx - (count / 3);
            if (start < 0) {
                start = 0;
            }
        }
        int len = src.length();

        StringBuffer sbf = new StringBuffer();
        if (start > 0) {
            sbf.append(null == abbr ? "" : abbr);
        }
        int i = start;
        char c = 0;
        int cnt = 0;
        boolean inTag = false;
        while (i < len) {
            if (cnt >= count) {
                break;
            }
            c = src.charAt(i);
            i++;
            if (inTag) {
                if ('>' == c) {
                    inTag = false;
                }
                continue;
            }
            if ('<' == c) {
                c = src.charAt(i);
                i++;
                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c == '/')) {
                    inTag = true;
                    continue;
                } else {
                    sbf.append('<').append(c);
                    cnt += 2;
                }
            } else {
                sbf.append(c);
                cnt++;
            }
        }

        return sbf.append(null == abbr ? "" : abbr).toString();
    }

    /**
     * 문자열이 정수형인지 판단한다.(첫번째 문자가 '-'인 경우를 제외하고 모든 문자가 digit여야 한다.
     */
    public static boolean isInteger(String src) {
        int sz = 0;
        if (null == src || 0 == (sz = src.length())) {
            return false;
        }
        if ('-' != src.charAt(0) && ! Character.isDigit(src.charAt(0))) {
            return false;
        }
        for (int i = 1 ; i < sz ; i++) {
            if (! Character.isDigit(src.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    /**
     * 문자열이 boolean으로 해석될 수 있는지 판단한다.
     * yes/no, true/false, on/off, 1/0 이면 boolean으로 해석한다고 본다.
     */
    public static boolean isBoolean(String src) {
        if (null == src || 0 == src.length()) {
            return false;
        }
        String temp = src.toLowerCase();
        if ("yes".equals(temp) || "no".equals(temp) ||
                "on".equals(temp) || "off".equals(temp) ||
                "true".equals(temp) || "false".equals(temp) ||
                "1".equals(temp) || "0".equals(temp)) {
            return true;
        }
        return false;
    }

    /**
     * 문자열이 한글, 영문, 숫자, 공백으로만 이루어진 평범한 문자열인지 판단한다.
     */
    public static boolean checkNormalString(String query) {
        if (StringUtils.isEmpty(query)) {
            return false;
        }
        int len = query.length();
        int i = 0;
        char c = 0;
        while (i < len) {
            c = query.charAt(i);
            i++;
            if (('0' <= c && c <= '9') ||
                    ('a' <= c && c <= 'z') ||
                    ('A' <= c && c <= 'Z') ||
                    ('가' <= c && c <= '힣') ||
                    ' ' == c || '\t' == c) {
                continue;
            } else {
                return false;
            }
        }
        return true;
    }
    
    public static Date parseDate(String data) {
        return parseDate(data, "yyyyMMdd");
    }
    
    public static Date parseDate(String data, String format) {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        try {
            return sdf.parse(data);
        } catch (ParseException ignore) {
            return null;
        }
    }
    
    /**
     * String masking. size 로 지정된 숫자만큼 원래 문자열을 보여주고 나머지는 *로 마스킹한다.
     */
    public static String mask(String src, int size) {
        if (null == src) {
            return null;
        }
        int len = src.length();
        
        if (len < size - 1) {
            return src;
        }
        
        if (len < size) {
            return src.substring(0, size - 1) + "*";
        }
        
        StringBuilder sb = new StringBuilder();
        sb.append(src.substring(0, size));
        for (int i = size; i < len; i++) {
            sb.append('*');
        }
        
        return sb.toString();
    }

    /*
     * css에서 사용하는 point 값을 pixel 값으로 바꾼다.
     * (8pt = 11px, 9pt = 12px, 10pt = 13px, 11pt = 15px, 12pt = 16px, 13pt = 17px, 14pt = 19px)
     * getTextWidth(), limitStringByFontWidth() 메서드에서 사용한다.
     */
    private static int pointToPixel(int point) {
        switch (point) {
        case 8:
            return 11;
        case 9:
            return 12;
        case 10:
            return 13;
        case 11:
            return 15;
        case 12:
            return 16;
        case 13:
            return 17;
        case 14:
            return 19;
        default:
            throw new RuntimeException("Point value must be 8 ~ 14");
        }
    }

    /*
     * font 이름으로 font 크기 정보를 담고 있는 테이블을 얻는다.
     * getTextWidth(), limitStringByFontWidth() 메서드에서 사용한다.
     */
    private static int[][] findFontMap(String fontName) {
        String font = fontName.toLowerCase();
        if ("gulim".equals(font)) {
            return gulim;
        } else if ("dotum".equals(font)) {
            return dotum;
        } else if ("batang".equals(font)) {
            return batang;
        } else if ("gungsuh".equals(font)) {
            return gungsuh;
        } else if ("times".equals(font)) {
            return times;
        } else if ("arial".equals(font)) {
            return arial;
        } else if ("tahoma".equals(font)) {
            return tahoma;
        } else if ("verdana".equals(font)) {
            return verdana;
        }
        return gulim;
    }

    /**
     * 문자열의 각 문자가 차지하는 픽셀을 세어 문자열이 표현될 때 너비가 정해진 픽셀을
     * 넘지 않도록 문자열을 잘라준다.
     *
     * @param src 원본 문자열
     * @param width 픽셀 너비
     * @param postfix 문자열을 자를 때 생략 기호로 붙일 문자열
     * @param font 폰트 이름 (gulim, batang, dotum, gungsuh, arial, times, tahoma, verdana만 된다)
     * @param pixel 폰트 크기 (pixel 단위, 8pt = 11px, 9pt = 12px, 10pt = 13px, 11pt = 15px, 12pt = 16px, 13pt = 17px, 14pt = 19px이다)
     * @return 잘려진 문자열
     */
    public static String limitStringByFontWidth(String src, int width, String postfix, String font, int point) {
        if (null == src || 0 == src.length()) {
            return src;
        }
        int[][] fontMap = findFontMap(font);

        int size = 0;
        int len = 0;
        int pixel = pointToPixel(point);
        if (! StringUtils.isEmpty(postfix)) {
            for (int i = 0 ; i < len ; i++) {
                size += getFontWidth(postfix.charAt(i), fontMap, pixel);
            }
        }
        int idx = 0;
        len = src.length();
        while (idx < len) {
            size += getFontWidth(src.charAt(idx), fontMap, pixel);
            if (size >= width) {
                break;
            }
            idx++;
        }

        if (idx < len) {
            String result = src.substring(0, idx);
            if (! StringUtils.isEmpty(postfix)) {
                result += postfix;
            }
            return result;
        } else {
            return src;
        }
    }

    public static int getTextWidth(String src, String font, int point) {
        if (null == src || 0 == src.length()) {
            return 0;
        }
        int[][] fontMap = findFontMap(font);

        int size = 0;
        int len = src.length();
        int pixel = pointToPixel(point);
        for (int i = 0 ; i < len ; i++) {
            size += getFontWidth(src.charAt(i), fontMap, pixel);
        }
        return size;
    }

    private static int getFontWidth(char c, int[][] font, int pixel) {
        if (c > 127) {
            return pixel;
        }
        if (c >= 32 && c <= 127) {
            return font[pixel - 11][c - 32];
        }
        return (0 == pixel % 2 ? pixel / 2 : pixel / 2 + 1);
    }

    //  Gulim font family
    private static int[][] gulim = {
        // 11px
        {4,3,5,7,7,10,7,3,4,4,5,5,3,5,3,5,6,6,6,6,6,6,6,6,6,6,3,3,7,6,7,6,11,8,7,8,8,7,7,9,8,3,5,7,6,9,7,9,8,9,8,8,7,8,9,11,8,8,8,4,11,4,5,6,3,7,7,7,7,7,4,7,7,3,3,6,3,9,7,7,7,7,4,7,4,7,7,9,6,7,6,4,3,4,6,6},
        // 12px
        {4,4,4,6,6,10,8,4,5,5,6,6,4,6,4,6,6,6,6,6,6,6,6,6,6,6,4,4,8,6,8,6,12,8,8,9,8,8,7,9,8,3,6,8,7,11,9,9,8,9,8,8,8,8,8,10,8,8,8,6,11,6,6,6,4,7,7,7,7,7,3,7,7,3,3,6,3,11,7,7,7,7,4,7,3,7,6,10,7,7,7,6,6,6,9,6},
        // 13px
        {4,4,4,8,7,12,8,4,5,5,7,7,4,7,4,6,7,7,7,7,7,7,7,7,7,7,4,4,7,7,7,7,11,8,9,9,9,8,7,10,9,3,6,8,7,11,9,10,9,10,9,9,8,9,8,12,8,8,9,7,13,7,7,7,4,8,8,8,8,8,3,8,8,3,3,6,3,11,8,8,8,8,5,8,3,8,6,10,7,7,7,7,7,7,10,7},
        // 14px
        {5,5,5,8,9,11,9,5,6,6,7,8,5,8,5,6,8,8,8,8,8,8,8,8,8,8,5,5,10,8,10,8,13,9,10,10,10,9,8,11,10,3,6,8,8,12,9,12,10,12,10,10,8,10,8,14,9,8,9,7,14,7,7,7,5,8,8,8,8,8,4,8,8,3,3,7,3,11,8,9,8,8,4,8,4,8,8,10,9,8,8,7,7,7,11,7},
        // 15px
        {5,5,5,8,9,11,9,5,6,6,7,8,5,8,5,6,8,8,8,8,8,8,8,8,8,8,5,5,10,8,10,8,13,9,10,10,10,9,8,11,10,3,6,8,8,12,9,12,10,12,10,10,8,10,8,14,9,8,9,7,14,7,7,8,5,8,8,8,8,8,4,8,8,3,3,7,3,11,8,9,8,8,4,8,4,8,8,10,9,8,8,7,7,7,11,8},
        // 16px
        {5,5,5,11,9,14,10,5,6,6,7,8,5,8,5,6,8,8,8,8,9,8,8,8,8,8,5,5,11,8,11,8,13,10,10,11,10,10,9,11,10,3,6,10,9,13,11,12,10,12,10,10,9,11,10,14,11,10,10,8,14,8,8,8,6,9,9,9,9,9,5,9,9,3,4,8,3,13,9,10,9,9,5,9,5,9,8,10,9,8,9,8,8,8,12,8},
        // 17px
        {5,5,5,11,9,14,10,5,6,6,7,8,5,8,5,6,8,8,8,8,9,8,8,8,8,8,5,5,11,8,11,8,13,10,10,11,10,10,9,11,10,3,6,10,9,13,11,12,10,12,10,10,9,11,10,14,11,10,10,8,14,8,8,9,6,9,9,9,9,9,5,9,9,3,4,8,3,13,9,10,9,9,5,9,5,9,8,10,9,8,9,8,8,8,12,9},
        // 18px
        {6,6,6,11,11,14,12,6,6,6,9,9,6,9,6,8,10,10,10,10,10,10,10,10,10,10,6,6,12,9,12,11,18,12,11,12,11,11,9,12,11,3,8,11,9,15,12,13,11,13,11,11,10,11,11,15,11,11,11,9,17,9,11,9,6,10,10,10,10,10,5,10,10,3,4,9,3,15,10,11,10,10,6,10,5,10,10,14,10,10,9,9,9,9,14,9},
        // 19px
        {6,6,6,11,11,14,12,6,6,6,9,9,6,9,6,8,10,10,10,10,10,10,10,10,10,10,6,6,12,9,12,11,18,12,11,12,11,11,9,12,11,3,8,11,9,15,12,13,11,13,11,11,10,11,11,15,11,11,11,9,17,9,11,9,6,10,10,10,10,10,5,10,10,3,4,9,3,15,10,11,10,10,6,10,5,10,10,14,10,10,9,9,9,9,14,10}
    };
    // Dotum font family
    private static int[][] dotum = {
        // 11px
        {4,3,4,7,6,10,7,3,4,4,5,6,3,6,2,4,6,6,6,6,6,6,6,6,6,6,3,3,7,6,7,6,11,8,7,8,8,7,7,9,8,3,5,7,6,9,7,9,8,9,8,8,7,8,9,11,8,8,8,4,11,4,5,6,3,7,7,7,7,7,4,7,7,3,3,6,3,9,7,7,7,7,4,7,4,7,6,9,6,7,6,4,3,4,6,6},
        // 12px
        {4,3,5,7,7,11,8,4,5,5,6,6,4,6,4,6,6,6,6,6,6,6,6,6,6,6,4,4,8,6,8,6,10,8,8,9,8,8,7,9,8,3,6,7,7,11,8,9,8,9,8,8,7,8,8,10,8,8,8,6,11,6,6,6,4,7,7,7,7,7,3,7,7,3,3,6,3,9,7,7,7,7,4,7,3,7,6,10,6,6,7,6,6,6,9,6},
        // 13px
        {4,3,5,7,7,11,8,4,5,5,6,6,4,6,4,6,6,6,6,6,6,6,6,6,6,6,4,4,7,6,7,6,10,8,8,9,8,8,7,9,8,3,6,7,7,11,8,9,8,9,8,8,7,8,8,10,8,8,8,6,11,6,6,6,4,7,7,7,7,7,3,7,7,3,3,6,3,9,7,7,7,7,4,7,3,7,6,10,6,6,7,6,6,6,9,7},
        // 14px
        {5,5,5,8,9,10,8,5,6,6,7,8,5,8,5,6,9,9,9,9,9,9,9,9,9,9,5,5,9,8,9,8,13,8,10,10,10,9,8,11,9,3,6,8,8,12,10,12,10,12,10,10,8,10,8,14,10,10,9,7,14,7,7,7,4,8,8,8,8,8,4,8,8,3,3,7,3,11,8,9,8,8,4,7,4,8,8,10,8,8,7,7,7,7,11,7},
        // 15px
        {5,5,5,8,9,10,8,5,6,6,7,8,5,8,5,6,9,9,9,9,9,9,9,9,9,9,5,5,9,8,9,8,13,8,10,10,10,9,8,11,9,3,6,8,8,12,10,12,10,12,10,10,8,10,8,14,10,10,9,7,14,7,7,8,4,8,8,8,8,8,4,8,8,3,3,7,3,11,8,9,8,8,4,7,4,8,8,10,8,8,7,7,7,7,11,8},
        // 16px
        {5,5,6,13,9,13,12,5,6,6,7,8,5,8,5,7,8,8,8,8,8,8,8,8,8,8,5,5,9,8,9,8,16,10,10,11,10,10,9,12,10,3,8,10,9,13,11,12,10,12,10,10,9,11,10,14,11,10,10,8,14,8,8,6,5,9,9,9,9,9,5,9,9,3,4,8,3,13,9,10,9,9,5,9,5,9,8,12,9,8,9,9,9,9,12,8},
        // 17px
        {5,5,6,13,9,13,12,5,6,6,7,8,5,8,5,7,8,8,8,8,8,8,8,8,8,8,5,5,11,8,11,8,16,10,10,11,10,10,9,12,10,3,8,10,9,13,11,12,10,12,10,10,9,11,10,14,11,10,10,8,14,8,8,8,6,9,9,9,9,9,5,9,9,3,4,8,3,13,9,10,9,9,5,9,5,9,8,12,9,8,9,9,9,9,12,9},
        // 18px
        {6,6,8,13,11,15,12,5,6,6,9,10,6,10,6,7,10,10,10,10,10,10,10,10,10,10,6,6,11,10,11,10,15,12,11,12,12,11,10,13,12,3,8,10,10,13,11,13,11,13,11,11,10,12,11,15,11,11,11,9,17,9,9,9,5,9,10,10,10,10,5,10,9,3,4,9,3,15,10,11,10,10,5,9,5,10,10,14,10,9,10,9,9,9,14,9},
        // 19px
        {6,6,8,13,11,15,12,5,6,6,9,10,6,10,6,7,10,10,10,10,10,10,10,10,10,10,6,6,10,10,10,10,15,12,11,12,12,11,10,13,12,3,8,10,10,13,11,13,11,13,11,11,10,12,11,15,11,11,11,9,17,9,9,10,5,9,10,10,10,10,5,10,9,3,4,9,3,15,10,11,10,10,5,9,5,10,10,14,10,9,10,9,9,9,14,10}
    };
    // Batang font family
    private static int[][] batang = {
        // 11px
        {4,3,4,6,6,9,8,3,4,4,6,6,2,6,2,4,6,6,6,6,6,6,6,6,6,6,3,3,6,6,6,6,10,9,8,8,8,7,6,9,8,4,5,8,6,9,8,8,7,8,8,7,7,8,7,10,7,7,7,4,11,4,6,6,3,7,7,6,7,6,4,7,6,3,3,6,3,9,6,6,6,6,5,6,4,6,7,9,6,6,6,4,3,4,6,6},
        // 12px
        {4,4,5,7,7,10,9,4,5,5,6,6,4,6,4,6,6,6,6,6,6,6,6,6,6,6,4,4,8,6,8,6,11,9,8,8,8,8,8,9,9,4,5,9,8,11,9,9,8,10,9,7,7,8,9,11,7,7,7,6,11,6,6,6,4,7,7,7,8,7,5,7,8,4,3,7,4,10,8,7,7,8,6,6,5,7,7,11,7,7,6,6,6,6,9,6},
        // 13px
        {4,4,4,8,7,12,11,4,5,5,7,7,4,7,4,6,7,7,7,7,7,7,7,7,7,7,4,4,8,7,8,7,12,9,9,9,9,8,8,10,9,3,5,8,8,11,9,10,8,10,8,8,9,9,9,11,8,9,9,7,12,7,7,7,4,7,8,8,8,8,4,8,7,3,4,7,3,11,7,8,8,8,5,8,4,7,7,11,7,7,7,7,7,7,8,7},
        // 14px
        {5,5,5,10,9,13,11,5,6,6,7,8,5,8,5,6,8,8,8,8,8,8,8,8,8,8,5,5,8,8,8,8,13,9,9,9,9,9,8,10,9,3,5,9,8,11,9,10,8,10,9,9,9,9,9,11,8,9,10,7,12,7,8,7,5,7,8,8,8,8,4,8,7,3,4,8,4,12,8,7,8,8,6,6,4,7,7,11,8,8,7,7,7,7,11,7},
        // 15px
        {5,5,5,10,9,13,11,5,6,6,7,8,5,8,5,6,8,8,8,8,8,8,8,8,8,8,5,5,8,8,8,8,13,9,9,9,9,9,8,10,9,3,5,9,8,11,9,10,8,10,9,9,9,9,9,11,8,9,10,7,12,7,8,8,5,7,8,8,8,8,4,8,7,3,4,8,4,12,8,7,8,8,6,6,4,7,7,11,8,8,7,7,7,7,11,8},
        // 16px
        {5,5,5,10,9,15,13,5,5,5,9,9,5,9,5,7,9,9,9,9,9,9,9,9,9,9,5,5,8,9,8,9,14,12,12,12,12,11,10,12,10,5,7,12,10,15,12,13,11,13,11,10,11,13,13,14,12,11,10,8,17,8,9,8,5,8,9,8,9,8,6,9,9,4,5,9,4,14,9,9,9,9,7,8,6,9,9,11,8,9,7,8,8,8,12,8},
        // 17px
        {5,5,5,10,9,15,13,5,5,5,9,9,5,9,5,7,9,9,9,9,9,9,9,9,9,9,5,5,8,9,8,9,14,12,12,12,12,11,10,12,10,5,7,12,10,15,12,13,11,13,11,10,11,13,13,14,12,11,10,8,17,8,9,9,5,8,9,8,9,8,6,9,9,4,5,9,4,14,9,9,9,9,7,8,6,9,9,11,8,9,7,8,8,8,12,9},
        // 18px
        {6,8,8,15,11,17,15,5,9,9,9,11,5,11,5,6,11,11,11,11,11,11,11,11,11,11,6,6,11,10,11,9,18,14,12,12,13,12,11,13,14,7,8,14,11,17,14,13,11,13,12,11,14,14,13,17,12,12,11,9,17,9,18,9,11,9,10,9,10,10,7,10,10,5,5,10,5,15,10,10,10,10,8,9,7,10,10,14,11,11,8,11,11,11,14,9},
        // 19px
        {6,6,6,13,11,15,14,6,6,6,9,10,6,10,6,6,10,10,10,10,10,10,10,10,10,10,6,6,9,9,9,11,17,11,11,11,12,11,10,12,12,5,7,12,10,15,13,13,10,14,12,11,11,13,13,16,12,11,10,9,17,9,10,10,6,9,10,9,9,9,6,10,10,5,5,10,5,14,10,9,9,10,8,8,6,10,10,12,10,10,8,9,9,9,13,10}
    };
    // Gungsuh font family
    private static int[][] gungsuh = {
        // 11px
        {4,3,4,6,7,9,7,3,5,5,6,6,3,6,3,4,6,6,6,6,6,6,6,6,6,6,3,3,7,6,7,6,7,7,7,8,7,7,7,8,7,5,6,7,6,7,7,8,7,8,7,8,7,7,7,7,7,7,8,4,9,4,4,6,3,7,7,8,7,8,5,7,7,5,6,6,5,7,7,7,7,7,6,8,6,7,7,7,6,7,8,5,3,5,6,6},
        // 12px
        {4,4,5,7,7,9,7,4,5,5,6,6,4,6,4,5,6,6,6,6,6,6,6,6,6,6,4,4,8,6,8,6,8,7,7,8,8,7,6,8,7,5,6,7,7,7,7,8,7,8,7,7,7,7,7,7,7,7,7,6,8,6,6,6,4,7,7,8,7,7,5,7,7,5,5,6,5,7,6,8,7,7,5,7,4,7,7,7,7,7,7,6,6,6,9,6},
        // 13px
        {4,4,5,7,7,9,7,4,5,5,6,6,4,6,4,5,6,6,6,6,6,6,6,6,6,6,4,4,8,6,8,6,8,7,7,8,8,7,6,8,7,5,6,7,7,7,7,8,7,8,7,7,7,7,7,7,7,7,7,6,8,6,6,7,4,7,7,8,7,7,5,7,7,5,5,6,5,7,6,8,7,7,5,7,4,7,7,7,7,7,7,6,6,6,9,7},
        // 14px
        {5,5,5,8,7,10,8,5,5,5,7,7,5,7,5,6,7,7,7,7,7,7,7,7,7,7,5,5,8,7,8,7,9,8,8,9,8,8,7,8,7,5,7,8,8,9,8,9,8,9,8,8,7,8,7,9,7,7,8,7,11,7,7,7,4,8,8,8,8,8,5,8,8,5,5,7,5,9,7,9,8,8,5,8,5,8,7,9,7,7,8,7,7,7,11,7},
        // 15px
        {5,5,5,8,7,10,8,5,5,5,7,7,5,7,5,6,7,7,7,7,7,7,7,7,7,7,5,5,9,7,9,7,9,8,8,9,8,8,7,8,7,5,7,8,8,9,8,9,8,9,8,8,7,8,7,9,7,7,8,7,11,7,7,8,4,8,8,8,8,8,5,8,8,5,5,7,5,9,7,9,8,8,5,8,5,8,7,9,7,7,8,7,7,7,11,8},
        // 16px
        {5,5,7,11,10,11,9,5,6,6,8,9,5,9,5,7,9,9,9,9,9,9,9,9,9,9,6,6,9,9,9,9,11,9,9,9,9,9,8,10,9,6,8,9,8,10,9,10,9,10,9,10,8,9,9,10,9,10,9,8,12,8,8,8,5,9,9,10,9,10,6,9,9,6,6,9,6,10,9,10,9,9,8,9,8,9,9,10,8,9,9,8,8,8,12,8},
        // 17px
        {5,5,7,11,10,11,9,5,6,6,8,9,5,9,5,7,9,9,9,9,9,9,9,9,9,9,6,6,10,9,10,9,11,9,9,9,9,9,8,10,9,6,8,9,8,10,9,10,9,10,9,10,8,9,9,10,9,10,9,8,12,8,8,9,5,9,9,10,9,10,6,9,9,6,6,9,6,10,9,10,9,9,8,9,8,9,9,10,8,9,9,8,8,8,12,9},
        // 18px
        {6,6,7,11,11,12,11,5,7,7,10,10,6,10,6,7,10,10,10,10,10,10,10,10,10,10,6,6,11,10,11,10,12,11,11,11,11,11,11,11,12,8,9,13,11,15,13,13,11,13,12,11,10,13,14,16,11,12,11,9,16,9,10,9,6,10,12,11,11,11,8,11,10,6,7,10,6,14,10,12,11,10,10,10,8,10,10,13,9,10,10,9,9,9,14,9},
        // 19px
        {6,6,7,11,11,12,11,5,7,7,10,10,6,10,6,7,10,10,10,10,10,10,10,10,10,10,6,6,11,10,11,10,12,11,11,11,11,11,11,11,12,8,9,13,11,15,13,13,11,13,12,11,10,13,14,16,11,12,11,9,16,9,10,10,6,10,12,11,11,11,8,11,10,6,7,10,6,14,10,12,11,10,10,10,8,10,10,13,9,10,10,9,9,9,14,10}
    };
    // Arial font family
    private static int[][] arial = {
        // 11px
        {3,2,4,6,6,10,7,2,4,4,4,6,3,4,3,3,6,6,6,6,6,6,6,6,6,6,3,3,6,6,6,6,11,8,7,7,7,6,6,8,7,2,5,7,6,8,7,8,6,8,7,7,6,7,8,10,7,8,7,3,3,3,5,6,4,6,6,6,6,6,4,6,6,2,2,5,2,8,6,6,6,6,4,6,3,6,6,10,6,6,6,4,2,4,6,6},
        // 12px
        {3,3,4,7,7,11,8,2,4,4,5,7,3,4,3,3,7,7,7,7,7,7,7,7,7,7,3,3,7,7,7,7,12,7,8,9,9,8,7,9,9,3,6,8,7,9,9,9,8,9,9,8,7,9,7,11,7,7,7,3,3,3,5,7,4,7,7,6,7,7,3,7,7,3,3,6,3,11,7,7,7,7,4,7,3,7,5,9,5,5,5,4,3,4,7,6},
        // 13px
        {4,3,5,7,7,12,9,2,4,4,5,8,4,4,4,4,7,7,7,7,7,7,7,7,7,7,4,4,8,8,8,7,13,9,9,9,9,9,8,10,9,3,6,9,7,11,9,10,9,10,9,9,7,9,9,13,7,9,7,4,4,4,5,7,4,7,7,7,7,7,3,7,7,3,3,7,3,11,7,7,7,7,4,7,4,7,5,9,7,7,7,4,3,4,8,8},
        // 14px
        {4,5,5,8,8,12,9,3,5,5,5,8,4,5,4,4,8,8,8,8,8,8,8,8,8,8,4,4,8,8,8,8,14,9,9,10,10,9,9,11,9,3,6,9,8,11,9,11,9,11,10,9,9,9,9,13,8,9,8,4,4,4,5,8,5,8,8,7,8,8,4,8,8,3,3,7,3,11,8,8,8,8,5,7,4,8,7,9,6,7,6,5,3,5,8,7},
        // 15px
        {4,5,5,8,8,13,10,3,5,5,6,9,4,5,4,4,8,8,8,8,8,8,8,8,8,8,4,4,9,9,9,8,15,9,10,11,11,10,9,11,10,3,7,10,8,11,10,12,10,12,11,10,9,10,9,15,9,9,8,4,4,4,5,8,5,8,8,8,8,8,4,8,8,3,3,7,3,13,8,8,8,8,5,8,4,8,7,11,7,7,8,5,3,5,9,8},
        // 16px
        {4,5,6,9,9,14,11,3,5,5,6,9,4,5,4,4,9,9,9,9,9,9,9,9,9,9,4,4,9,9,9,9,16,11,11,12,12,11,10,12,11,3,8,11,9,13,11,12,11,12,11,11,9,11,11,15,11,9,9,4,4,4,7,9,5,9,9,8,9,9,4,9,8,4,3,8,3,13,8,9,9,9,5,8,4,8,7,11,7,7,7,5,3,5,9,8},
        // 17px
        {5,5,6,9,9,15,11,3,6,6,7,10,5,6,5,5,9,9,9,9,9,9,9,9,9,9,5,5,10,10,10,9,17,11,11,12,12,11,10,12,11,5,9,11,9,13,11,12,11,12,11,11,9,11,11,17,11,11,9,5,5,5,7,9,6,9,9,9,9,9,5,9,9,4,3,8,3,13,9,9,9,9,6,8,4,9,7,11,7,9,8,6,5,6,10,9},
        // 18px
        {5,6,6,10,10,16,12,3,6,6,7,11,5,6,5,5,10,10,10,10,10,10,10,10,10,10,5,5,11,11,11,10,18,11,12,13,13,12,11,14,13,4,9,12,10,15,13,14,12,14,13,12,12,13,11,17,11,12,11,5,5,5,7,10,6,10,10,9,10,10,5,10,10,4,4,9,4,14,10,10,10,10,6,9,5,10,9,13,8,9,8,6,6,6,11,9},
        // 19px
        {5,6,7,11,11,17,13,4,6,6,7,11,5,6,5,5,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,19,13,13,14,14,13,12,15,13,6,10,13,11,15,13,15,13,15,14,13,12,13,13,19,13,12,12,5,5,5,7,11,6,10,11,10,11,11,6,11,10,4,4,9,4,16,10,11,11,11,6,10,5,10,9,13,9,9,9,6,6,6,11,10}
    };
    // Tahoma font family
    private static int[][] tahoma = {
        // 11px
        {3,4,4,8,6,11,7,2,4,4,6,8,4,4,4,4,6,6,6,6,6,6,6,6,6,6,4,4,8,8,8,5,10,7,6,7,7,6,6,7,7,4,5,6,5,8,7,8,6,8,7,6,6,7,6,10,6,6,6,4,11,4,8,6,6,6,6,5,6,6,4,6,6,2,3,5,2,8,6,6,6,6,4,5,4,6,6,8,6,6,5,5,4,5,8,6},
        // 12px
        {4,4,5,9,7,12,8,3,5,5,7,8,4,4,4,5,7,7,7,7,7,7,7,7,7,7,4,4,9,9,9,6,11,8,7,7,8,7,6,8,8,4,5,7,6,9,8,9,7,9,7,7,8,8,8,12,7,8,7,5,11,5,9,7,7,6,7,6,7,7,4,7,7,2,3,6,2,10,7,7,7,7,4,5,5,7,6,10,6,6,5,6,5,6,9,6},
        // 13px
        {4,4,5,9,7,12,9,3,5,5,8,8,4,5,4,5,7,7,7,7,7,7,7,7,7,7,5,5,9,9,9,6,12,8,7,8,8,7,7,8,8,4,5,7,6,10,8,9,7,9,8,8,8,8,8,12,8,7,7,5,14,5,9,7,7,7,7,6,7,7,4,7,7,3,4,6,3,11,7,7,7,7,5,6,4,7,6,10,6,6,6,6,6,6,9,8},
        // 14px
        {4,4,6,10,8,14,9,3,5,5,8,10,4,5,4,5,8,8,8,8,8,8,8,8,8,8,5,5,10,10,10,7,13,8,8,9,10,8,7,9,9,4,6,8,7,10,9,10,8,10,9,8,8,9,8,14,8,8,8,5,14,5,10,8,8,7,8,7,8,7,4,8,8,2,4,7,2,12,8,8,8,8,5,6,5,8,8,10,8,8,6,7,5,7,10,7},
        // 15px
        {5,4,6,11,8,15,10,3,6,6,8,11,5,5,5,6,8,8,8,8,8,8,8,8,8,8,5,5,11,11,11,7,14,9,9,9,10,8,8,10,10,6,6,9,7,12,10,11,8,11,9,8,10,10,9,14,9,10,8,6,14,6,11,8,8,8,8,7,8,8,5,8,8,2,4,7,2,13,8,8,8,8,5,7,5,8,8,10,8,8,7,7,6,7,11,8},
        // 16px
        {5,4,6,12,9,16,11,3,6,6,9,12,5,6,5,6,9,9,9,9,9,9,9,9,9,9,6,6,12,12,12,8,15,11,9,10,11,9,8,11,11,6,7,9,8,12,11,12,9,12,10,9,10,11,10,14,9,10,9,6,14,6,12,9,9,8,9,7,9,8,5,9,9,4,5,8,4,14,9,9,9,9,6,7,5,9,8,12,8,8,7,8,6,8,12,8},
        // 17px
        {5,6,7,12,9,17,11,4,7,7,9,12,5,6,5,7,9,9,9,9,9,9,9,9,9,9,6,6,12,12,12,8,15,11,10,10,12,10,9,11,11,6,7,10,8,13,11,12,9,12,11,9,10,11,10,15,10,10,10,7,14,7,12,9,9,9,9,8,9,9,5,9,9,4,5,8,4,14,9,9,9,9,6,8,6,9,8,13,8,8,8,8,7,8,12,9},
        // 18px
        {6,6,7,13,10,18,12,4,7,7,10,13,5,7,5,7,10,10,10,10,10,10,10,10,10,10,6,6,13,13,13,9,16,11,11,11,12,10,9,12,12,7,8,11,9,14,12,13,10,13,11,10,11,12,11,16,10,10,10,7,17,7,13,10,10,9,10,8,10,9,6,10,10,4,5,9,4,15,10,10,10,10,6,8,6,10,9,13,9,9,8,9,7,9,13,9},
        // 19px
        {6,6,8,14,10,19,13,4,7,7,10,14,6,7,6,7,10,10,10,10,10,10,10,10,10,10,7,7,14,14,14,9,17,11,11,11,13,11,10,13,13,7,8,11,9,15,13,13,10,13,12,11,11,12,11,17,11,11,11,7,17,7,14,10,10,10,11,9,11,10,6,11,11,4,5,9,4,16,11,10,11,11,7,8,6,11,9,14,9,9,8,9,7,9,14,10}
    };
    // Times new Roman font family
    private static int[][] times = {
        // 11px
        {3,4,5,6,6,9,9,2,4,4,6,6,3,4,3,3,6,6,6,6,6,6,6,6,6,6,3,3,6,6,6,5,10,8,7,7,8,7,6,7,8,4,4,8,7,10,8,8,7,8,7,5,8,8,7,11,8,8,7,4,3,4,5,6,4,5,5,5,5,5,4,5,6,3,3,6,3,9,6,6,6,5,4,4,4,5,6,7,6,6,5,5,2,5,6,6},
        // 12px
        {3,4,5,6,6,10,9,2,4,4,6,7,3,4,3,3,6,6,6,6,6,6,6,6,6,6,3,3,7,7,7,5,11,9,8,8,9,7,7,9,9,4,5,9,7,12,9,9,7,9,8,6,8,9,8,11,9,8,8,4,3,4,6,6,4,5,6,5,6,5,4,5,6,3,3,6,3,9,6,6,7,6,4,5,4,6,6,9,5,7,6,6,2,6,6,6},
        // 13px
        {3,4,6,7,6,11,10,2,4,4,7,7,3,4,3,4,6,6,6,6,6,6,6,6,6,6,3,4,7,7,7,6,12,10,8,8,9,7,7,8,9,4,5,9,7,12,9,9,7,9,8,7,8,9,8,13,9,8,8,4,4,4,6,7,4,6,7,6,7,6,4,7,7,3,3,6,3,9,7,7,7,7,4,6,4,7,7,9,5,7,5,6,2,6,7,8},
        // 14px
        {4,5,5,7,7,12,11,3,5,5,7,8,4,5,4,4,7,7,7,7,7,7,7,7,7,7,3,4,8,8,8,6,13,9,8,9,10,8,8,10,9,5,6,9,8,12,10,10,8,10,9,8,9,9,9,13,10,9,8,5,4,5,6,7,4,6,7,7,7,6,5,7,7,3,3,7,3,11,7,7,7,7,5,6,4,7,7,11,7,7,6,7,3,7,8,7},
        // 15px
        {4,5,5,8,7,13,12,3,5,5,7,8,3,5,4,4,7,7,7,7,7,7,7,7,7,7,3,4,8,8,8,7,14,11,10,10,11,9,8,10,11,5,6,11,9,13,11,11,9,11,10,8,9,11,11,14,10,11,9,5,4,5,6,8,4,7,7,7,7,7,5,7,7,3,3,7,3,11,7,7,7,7,5,6,4,7,7,11,7,7,6,7,3,7,8,8},
        // 16px
        {4,5,5,8,8,13,12,3,5,5,8,9,4,6,4,4,8,8,8,8,8,8,8,8,8,8,3,4,9,9,9,7,15,11,10,11,11,9,9,11,11,5,6,12,9,14,12,12,9,12,10,9,9,11,11,15,11,11,9,5,4,5,8,8,5,7,8,7,8,7,4,7,7,3,4,8,3,11,7,8,8,8,5,6,4,7,7,11,7,7,6,7,3,8,9,8},
        // 17px
        {4,5,5,9,9,14,13,3,6,6,9,10,4,6,4,5,9,9,9,9,9,9,9,9,9,9,5,4,10,10,10,7,15,11,11,11,12,10,9,12,12,5,7,12,10,15,12,12,10,12,11,9,9,12,11,16,12,11,10,5,5,5,8,9,6,7,8,8,8,8,6,8,8,5,5,8,5,13,8,9,8,8,6,7,5,8,7,11,8,8,7,8,3,8,9,9},
        // 18px
        {5,6,7,9,9,15,14,4,6,6,9,10,5,6,5,5,9,9,9,9,9,9,9,9,9,9,4,5,10,10,10,8,16,12,12,12,13,11,10,13,13,6,7,13,11,16,13,13,11,13,12,10,12,13,12,17,13,13,11,6,5,6,8,9,6,8,9,8,9,8,6,8,9,4,5,9,4,14,9,9,9,9,6,7,5,9,9,13,8,9,8,9,3,9,10,9},
        // 19px
        {5,6,8,10,9,16,15,4,6,6,9,11,5,6,5,5,9,9,9,9,9,9,9,9,9,9,4,5,11,11,11,8,17,13,12,13,13,11,11,14,13,6,7,13,11,16,13,14,11,14,13,11,12,13,13,18,13,13,11,6,5,6,8,10,6,8,10,9,10,8,6,9,9,4,4,9,4,14,9,10,10,10,6,8,5,9,9,13,9,9,8,9,3,9,10,10}
    };
    // Verdana font family
    private static int[][] verdana = {
        // 11px
        {4,4,5,9,7,12,8,3,5,5,7,9,4,5,4,5,7,7,7,7,7,7,7,7,7,7,5,5,9,9,9,6,10,8,8,9,9,7,6,9,8,5,5,8,6,9,8,9,7,9,8,8,7,8,8,11,8,7,8,5,5,5,9,7,7,7,7,6,7,7,4,7,7,3,4,7,3,11,7,7,7,7,5,6,4,7,7,9,7,7,6,7,5,7,9,6},
        // 12px
        {4,5,6,10,8,13,9,3,5,5,8,9,4,5,4,5,8,8,8,8,8,8,8,8,8,8,5,5,9,9,9,7,12,8,8,9,9,8,7,9,9,5,5,8,7,10,9,10,8,10,8,8,7,9,8,13,8,7,8,5,5,5,10,8,8,8,8,6,8,8,4,8,8,3,4,7,3,11,8,8,8,8,5,7,5,8,7,11,7,7,7,8,5,8,10,6},
        // 13px
        {5,5,5,10,8,13,9,3,6,6,9,9,5,7,5,6,8,8,8,8,8,8,8,8,8,8,6,6,9,9,9,7,13,9,8,9,9,8,8,9,9,5,6,8,7,11,9,10,8,10,8,9,9,9,9,13,9,9,9,6,6,6,11,8,8,8,8,8,8,8,5,8,8,3,4,7,3,11,8,8,8,8,5,7,6,8,8,11,7,8,7,8,7,8,11,8},
        // 14px
        {5,6,6,11,9,15,10,4,6,6,9,11,5,7,5,6,9,9,9,9,9,9,9,9,9,9,6,6,11,11,11,8,14,10,10,10,11,9,8,11,10,5,6,10,8,11,10,11,8,11,10,10,9,10,10,15,10,9,10,6,6,6,11,9,9,8,9,7,9,8,5,9,9,3,5,8,3,13,9,9,9,9,6,8,6,9,8,11,9,8,8,9,6,9,11,7},
        // 15px
        {5,6,7,12,10,16,11,4,7,7,10,12,5,7,5,7,10,10,10,10,10,10,10,10,10,10,7,7,12,12,12,8,15,10,10,11,11,9,9,12,11,5,7,10,8,13,11,12,9,12,10,10,9,11,10,15,10,9,10,7,7,7,12,10,10,9,9,8,9,9,5,9,9,3,5,9,3,15,9,10,9,9,6,8,6,9,9,13,9,9,9,10,7,10,12,8},
        // 16px
        {6,6,7,13,10,17,12,4,7,7,10,13,6,7,6,7,10,10,10,10,10,10,10,10,10,10,7,7,13,13,13,9,16,11,11,11,12,10,9,12,12,7,7,11,9,13,12,13,10,13,11,10,10,12,11,17,11,11,11,7,7,7,13,10,10,10,10,8,10,10,6,10,10,5,6,9,5,15,10,10,10,10,6,9,7,10,9,13,9,9,9,10,7,10,13,8},
        // 17px
        {6,7,8,14,11,18,12,5,8,8,11,14,6,8,6,8,11,11,11,11,11,11,11,11,11,11,8,8,14,14,14,9,17,12,12,12,13,11,10,13,13,8,8,12,9,14,13,13,10,13,12,12,10,12,12,17,12,10,12,8,8,8,14,11,11,10,11,9,11,10,6,11,11,5,6,10,5,17,11,10,11,11,7,9,7,11,10,14,10,10,9,11,8,11,14,9},
        // 18px
        {6,7,8,15,11,19,13,5,8,8,11,15,7,8,7,8,11,11,11,11,11,11,11,11,11,11,8,8,15,15,15,10,18,12,12,13,14,11,10,14,14,8,8,12,10,15,13,14,11,14,13,12,11,13,12,18,12,11,12,8,8,8,15,11,11,11,11,9,11,11,6,11,11,5,6,11,5,18,11,11,11,11,8,9,7,11,11,15,11,11,9,11,8,11,15,9},
        // 19px
        {7,7,9,16,12,20,14,5,9,9,12,16,7,9,7,9,12,12,12,12,12,12,12,12,12,12,9,9,16,16,16,10,19,13,13,13,15,12,11,15,14,8,9,13,11,16,14,15,11,15,13,13,12,14,13,19,13,12,13,9,9,9,16,12,12,11,12,10,12,11,7,12,12,6,7,11,6,18,12,12,12,12,8,10,7,12,11,16,11,11,10,12,9,12,16,10}
    };
}
